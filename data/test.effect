#define MAX_RECTS 100

uniform float4x4 ViewProj;
uniform texture2d image;

uniform float4 color = {0.5, 1.0, 0.5, 1.0};  // Rectangle outline color

uniform float4 face;
uniform float4 eye_1;
uniform float4 eye_2;
uniform float4 mouth;

uniform float4 rects[MAX_RECTS];             // Array to store up to 100 rectangles
uniform int rectCount = 0;                   // Number of valid rectangles

uniform float borderThickness = 0.001f; // Thickness of the rectangle outline

sampler_state texSampler {
    AddressU  = Clamp;
    AddressV  = Clamp;
    Filter    = Linear;
};

struct VertexInOut {
    float4 pos : POSITION;
    float2 uv  : TEXCOORD0;
};

VertexInOut VShader(VertexInOut vert_in)
{
    VertexInOut vert_out;
    vert_out.pos = mul(float4(vert_in.pos.xyz, 1.0), ViewProj);
    vert_out.uv = vert_in.uv;
    return vert_out;
}

float4 PShader(VertexInOut fragment_in) : TARGET
{   
    bool isInFace = (abs(fragment_in.uv.x - face[0]) < borderThickness || abs(fragment_in.uv.x - face[1]) < borderThickness) && fragment_in.uv.y >= face[2] && fragment_in.uv.y <= face[3] ||
                    (abs(fragment_in.uv.y - face[2]) < borderThickness || abs(fragment_in.uv.y - face[3]) < borderThickness) && fragment_in.uv.x >= face[0] && fragment_in.uv.x <= face[1];

    bool isInEye1 = (abs(fragment_in.uv.x - eye_1[0]) < borderThickness || abs(fragment_in.uv.x - eye_1[1]) < borderThickness) && fragment_in.uv.y >= eye_1[2] && fragment_in.uv.y <= eye_1[3] ||
                    (abs(fragment_in.uv.y - eye_1[2]) < borderThickness || abs(fragment_in.uv.y - eye_1[3]) < borderThickness) && fragment_in.uv.x >= eye_1[0] && fragment_in.uv.x <= eye_1[1];

    bool isInEye2 = (abs(fragment_in.uv.x - eye_2[0]) < borderThickness || abs(fragment_in.uv.x - eye_2[1]) < borderThickness) && fragment_in.uv.y >= eye_2[2] && fragment_in.uv.y <= eye_2[3] ||
                    (abs(fragment_in.uv.y - eye_2[2]) < borderThickness || abs(fragment_in.uv.y - eye_2[3]) < borderThickness) && fragment_in.uv.x >= eye_2[0] && fragment_in.uv.x <= eye_2[1];

    bool isInMouth = (abs(fragment_in.uv.x - mouth[0]) < borderThickness || abs(fragment_in.uv.x - mouth[1]) < borderThickness) && fragment_in.uv.y >= mouth[2] && fragment_in.uv.y <= mouth[3] ||
                     (abs(fragment_in.uv.y - mouth[2]) < borderThickness || abs(fragment_in.uv.y - mouth[3]) < borderThickness) && fragment_in.uv.x >= mouth[0] && fragment_in.uv.x <= mouth[1];

    if (isInFace || isInEye1 || isInEye2 || isInMouth) {
        // If inside any of the rectangles, return the color
        return color;
    } else {
        // Otherwise, return the texture color
        return image.Sample(texSampler, fragment_in.uv);
    }
}

technique Draw
{
    pass
    {
        vertex_shader = VShader(vert_in);
        pixel_shader  = PShader(fragment_in);
    }
}
